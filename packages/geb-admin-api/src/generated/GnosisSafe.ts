/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { BaseContractAPI } from '@money-god/geb-contract-base'
import { MulticallRequest } from '@money-god/geb-contract-base'
import { TransactionRequest } from '@money-god/geb-contract-base'
import { BytesLike } from '@ethersproject/bytes'
import { BigNumberish } from '@ethersproject/bignumber'
import { BigNumber } from '@ethersproject/bignumber'

export class GnosisSafe extends BaseContractAPI {
    NAME(): Promise<string>
    NAME(multicall: true): MulticallRequest<string>
    NAME(multicall?: true): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"NAME","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    VERSION(): Promise<string>
    VERSION(multicall: true): MulticallRequest<string>
    VERSION(multicall?: true): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"VERSION","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    addOwnerWithThreshold(
        owner: string,
        _threshold: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"_threshold","type":"uint256"}],"name":"addOwnerWithThreshold","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [owner, _threshold])
    }

    approveHash(hashToApprove: BytesLike): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"bytes32","name":"hashToApprove","type":"bytes32"}],"name":"approveHash","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [hashToApprove])
    }

    approvedHashes(address: string, bytes: BytesLike): Promise<BigNumber>
    approvedHashes(
        address: string,
        bytes: BytesLike,
        multicall: true
    ): MulticallRequest<BigNumber>
    approvedHashes(
        address: string,
        bytes: BytesLike,
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"approvedHashes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [address, bytes], multicall)
    }

    changeMasterCopy(_masterCopy: string): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"_masterCopy","type":"address"}],"name":"changeMasterCopy","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [_masterCopy])
    }

    changeThreshold(_threshold: BigNumberish): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"uint256","name":"_threshold","type":"uint256"}],"name":"changeThreshold","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [_threshold])
    }

    disableModule(prevModule: string, module: string): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"contract Module","name":"prevModule","type":"address"},{"internalType":"contract Module","name":"module","type":"address"}],"name":"disableModule","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [prevModule, module])
    }

    domainSeparator(): Promise<string>
    domainSeparator(multicall: true): MulticallRequest<string>
    domainSeparator(
        multicall?: true
    ): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"domainSeparator","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    enableModule(module: string): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"contract Module","name":"module","type":"address"}],"name":"enableModule","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [module])
    }

    encodeTransactionData(
        to: string,
        value: BigNumberish,
        data: BytesLike,
        operation: BigNumberish,
        safeTxGas: BigNumberish,
        baseGas: BigNumberish,
        gasPrice: BigNumberish,
        gasToken: string,
        refundReceiver: string,
        _nonce: BigNumberish
    ): Promise<string>
    encodeTransactionData(
        to: string,
        value: BigNumberish,
        data: BytesLike,
        operation: BigNumberish,
        safeTxGas: BigNumberish,
        baseGas: BigNumberish,
        gasPrice: BigNumberish,
        gasToken: string,
        refundReceiver: string,
        _nonce: BigNumberish,
        multicall: true
    ): MulticallRequest<string>
    encodeTransactionData(
        to: string,
        value: BigNumberish,
        data: BytesLike,
        operation: BigNumberish,
        safeTxGas: BigNumberish,
        baseGas: BigNumberish,
        gasPrice: BigNumberish,
        gasToken: string,
        refundReceiver: string,
        _nonce: BigNumberish,
        multicall?: true
    ): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"},{"internalType":"uint256","name":"safeTxGas","type":"uint256"},{"internalType":"uint256","name":"baseGas","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"address","name":"gasToken","type":"address"},{"internalType":"address","name":"refundReceiver","type":"address"},{"internalType":"uint256","name":"_nonce","type":"uint256"}],"name":"encodeTransactionData","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(
            abi,
            [
                to,
                value,
                data,
                operation,
                safeTxGas,
                baseGas,
                gasPrice,
                gasToken,
                refundReceiver,
                _nonce,
            ],
            multicall
        )
    }

    execTransaction(
        ethValue: BigNumberish,
        to: string,
        value: BigNumberish,
        data: BytesLike,
        operation: BigNumberish,
        safeTxGas: BigNumberish,
        baseGas: BigNumberish,
        gasPrice: BigNumberish,
        gasToken: string,
        refundReceiver: string,
        signatures: BytesLike
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"},{"internalType":"uint256","name":"safeTxGas","type":"uint256"},{"internalType":"uint256","name":"baseGas","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"address","name":"gasToken","type":"address"},{"internalType":"address payable","name":"refundReceiver","type":"address"},{"internalType":"bytes","name":"signatures","type":"bytes"}],"name":"execTransaction","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"payable","type":"function"}

        return this.getTransactionRequest(
            abi,
            [
                to,
                value,
                data,
                operation,
                safeTxGas,
                baseGas,
                gasPrice,
                gasToken,
                refundReceiver,
                signatures,
            ],
            BigNumber.from(ethValue)
        )
    }

    execTransactionFromModule(
        to: string,
        value: BigNumberish,
        data: BytesLike,
        operation: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"}],"name":"execTransactionFromModule","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [to, value, data, operation])
    }

    execTransactionFromModuleReturnData(
        to: string,
        value: BigNumberish,
        data: BytesLike,
        operation: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"}],"name":"execTransactionFromModuleReturnData","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [to, value, data, operation])
    }

    getMessageHash(message: BytesLike): Promise<string>
    getMessageHash(
        message: BytesLike,
        multicall: true
    ): MulticallRequest<string>
    getMessageHash(
        message: BytesLike,
        multicall?: true
    ): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"bytes","name":"message","type":"bytes"}],"name":"getMessageHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [message], multicall)
    }

    getModules(): Promise<string[]>
    getModules(multicall: true): MulticallRequest<string[]>
    getModules(
        multicall?: true
    ): Promise<string[]> | MulticallRequest<string[]> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"getModules","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    getModulesPaginated(
        start: string,
        pageSize: BigNumberish
    ): Promise<{
        array: string[]
        next: string
    }>
    getModulesPaginated(
        start: string,
        pageSize: BigNumberish,
        multicall: true
    ): MulticallRequest<{
        array: string[]
        next: string
    }>
    getModulesPaginated(
        start: string,
        pageSize: BigNumberish,
        multicall?: true
    ):
        | Promise<{
              array: string[]
              next: string
          }>
        | MulticallRequest<{
              array: string[]
              next: string
          }> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"start","type":"address"},{"internalType":"uint256","name":"pageSize","type":"uint256"}],"name":"getModulesPaginated","outputs":[{"internalType":"address[]","name":"array","type":"address[]"},{"internalType":"address","name":"next","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [start, pageSize], multicall)
    }

    getOwners(): Promise<string[]>
    getOwners(multicall: true): MulticallRequest<string[]>
    getOwners(
        multicall?: true
    ): Promise<string[]> | MulticallRequest<string[]> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"getOwners","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    getThreshold(): Promise<BigNumber>
    getThreshold(multicall: true): MulticallRequest<BigNumber>
    getThreshold(
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"getThreshold","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    getTransactionHash(
        to: string,
        value: BigNumberish,
        data: BytesLike,
        operation: BigNumberish,
        safeTxGas: BigNumberish,
        baseGas: BigNumberish,
        gasPrice: BigNumberish,
        gasToken: string,
        refundReceiver: string,
        _nonce: BigNumberish
    ): Promise<string>
    getTransactionHash(
        to: string,
        value: BigNumberish,
        data: BytesLike,
        operation: BigNumberish,
        safeTxGas: BigNumberish,
        baseGas: BigNumberish,
        gasPrice: BigNumberish,
        gasToken: string,
        refundReceiver: string,
        _nonce: BigNumberish,
        multicall: true
    ): MulticallRequest<string>
    getTransactionHash(
        to: string,
        value: BigNumberish,
        data: BytesLike,
        operation: BigNumberish,
        safeTxGas: BigNumberish,
        baseGas: BigNumberish,
        gasPrice: BigNumberish,
        gasToken: string,
        refundReceiver: string,
        _nonce: BigNumberish,
        multicall?: true
    ): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"},{"internalType":"uint256","name":"safeTxGas","type":"uint256"},{"internalType":"uint256","name":"baseGas","type":"uint256"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"address","name":"gasToken","type":"address"},{"internalType":"address","name":"refundReceiver","type":"address"},{"internalType":"uint256","name":"_nonce","type":"uint256"}],"name":"getTransactionHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(
            abi,
            [
                to,
                value,
                data,
                operation,
                safeTxGas,
                baseGas,
                gasPrice,
                gasToken,
                refundReceiver,
                _nonce,
            ],
            multicall
        )
    }

    isModuleEnabled(module: string): Promise<boolean>
    isModuleEnabled(module: string, multicall: true): MulticallRequest<boolean>
    isModuleEnabled(
        module: string,
        multicall?: true
    ): Promise<boolean> | MulticallRequest<boolean> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"contract Module","name":"module","type":"address"}],"name":"isModuleEnabled","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [module], multicall)
    }

    isOwner(owner: string): Promise<boolean>
    isOwner(owner: string, multicall: true): MulticallRequest<boolean>
    isOwner(
        owner: string,
        multicall?: true
    ): Promise<boolean> | MulticallRequest<boolean> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"isOwner","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [owner], multicall)
    }

    isValidSignature(
        _data: BytesLike,
        _signature: BytesLike
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"bytes","name":"_data","type":"bytes"},{"internalType":"bytes","name":"_signature","type":"bytes"}],"name":"isValidSignature","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [_data, _signature])
    }

    nonce(): Promise<BigNumber>
    nonce(multicall: true): MulticallRequest<BigNumber>
    nonce(multicall?: true): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"nonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    removeOwner(
        prevOwner: string,
        owner: string,
        _threshold: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"prevOwner","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"_threshold","type":"uint256"}],"name":"removeOwner","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [prevOwner, owner, _threshold])
    }

    requiredTxGas(
        to: string,
        value: BigNumberish,
        data: BytesLike,
        operation: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"}],"name":"requiredTxGas","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [to, value, data, operation])
    }

    setFallbackHandler(handler: string): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"handler","type":"address"}],"name":"setFallbackHandler","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [handler])
    }

    setup(
        _owners: string[],
        _threshold: BigNumberish,
        to: string,
        data: BytesLike,
        fallbackHandler: string,
        paymentToken: string,
        payment: BigNumberish,
        paymentReceiver: string
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address[]","name":"_owners","type":"address[]"},{"internalType":"uint256","name":"_threshold","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"address","name":"fallbackHandler","type":"address"},{"internalType":"address","name":"paymentToken","type":"address"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"address payable","name":"paymentReceiver","type":"address"}],"name":"setup","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [
            _owners,
            _threshold,
            to,
            data,
            fallbackHandler,
            paymentToken,
            payment,
            paymentReceiver,
        ])
    }

    signMessage(_data: BytesLike): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"signMessage","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [_data])
    }

    signedMessages(bytes: BytesLike): Promise<BigNumber>
    signedMessages(
        bytes: BytesLike,
        multicall: true
    ): MulticallRequest<BigNumber>
    signedMessages(
        bytes: BytesLike,
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"signedMessages","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [bytes], multicall)
    }

    swapOwner(
        prevOwner: string,
        oldOwner: string,
        newOwner: string
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"prevOwner","type":"address"},{"internalType":"address","name":"oldOwner","type":"address"},{"internalType":"address","name":"newOwner","type":"address"}],"name":"swapOwner","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [prevOwner, oldOwner, newOwner])
    }
}
