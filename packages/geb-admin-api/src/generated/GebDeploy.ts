/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { BaseContractAPI } from '@money-god/geb-contract-base'
import { MulticallRequest } from '@money-god/geb-contract-base'
import { TransactionRequest } from '@money-god/geb-contract-base'
import { BytesLike } from '@ethersproject/bytes'
import { BigNumberish } from '@ethersproject/bignumber'

export class GebDeploy extends BaseContractAPI {
    accountingEngine(): Promise<string>
    accountingEngine(multicall: true): MulticallRequest<string>
    accountingEngine(
        multicall?: true
    ): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"accountingEngine","outputs":[{"internalType":"contract AccountingEngine","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    accountingEngineFactory(): Promise<string>
    accountingEngineFactory(multicall: true): MulticallRequest<string>
    accountingEngineFactory(
        multicall?: true
    ): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"accountingEngineFactory","outputs":[{"internalType":"contract AccountingEngineFactory","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    addAuthToCollateralAuctionHouse(
        collateralType: BytesLike,
        usr: string
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"bytes32","name":"collateralType","type":"bytes32"},{"internalType":"address","name":"usr","type":"address"}],"name":"addAuthToCollateralAuctionHouse","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [collateralType, usr])
    }

    addCreatorAuth(): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"addCreatorAuth","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [])
    }

    authority(): Promise<string>
    authority(multicall: true): MulticallRequest<string>
    authority(multicall?: true): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"authority","outputs":[{"internalType":"contract DSAuthority","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    burningSurplusAuctionHouse(): Promise<string>
    burningSurplusAuctionHouse(multicall: true): MulticallRequest<string>
    burningSurplusAuctionHouse(
        multicall?: true
    ): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"burningSurplusAuctionHouse","outputs":[{"internalType":"contract BurningSurplusAuctionHouse","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    burningSurplusAuctionHouseFactory(): Promise<string>
    burningSurplusAuctionHouseFactory(multicall: true): MulticallRequest<string>
    burningSurplusAuctionHouseFactory(
        multicall?: true
    ): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"burningSurplusAuctionHouseFactory","outputs":[{"internalType":"contract BurningSurplusAuctionHouseFactory","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    coin(): Promise<string>
    coin(multicall: true): MulticallRequest<string>
    coin(multicall?: true): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"coin","outputs":[{"internalType":"contract Coin","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    coinFactory(): Promise<string>
    coinFactory(multicall: true): MulticallRequest<string>
    coinFactory(multicall?: true): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"coinFactory","outputs":[{"internalType":"contract CoinFactory","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    coinJoin(): Promise<string>
    coinJoin(multicall: true): MulticallRequest<string>
    coinJoin(multicall?: true): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"coinJoin","outputs":[{"internalType":"contract CoinJoin","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    coinJoinFactory(): Promise<string>
    coinJoinFactory(multicall: true): MulticallRequest<string>
    coinJoinFactory(
        multicall?: true
    ): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"coinJoinFactory","outputs":[{"internalType":"contract CoinJoinFactory","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    coinSavingsAccount(): Promise<string>
    coinSavingsAccount(multicall: true): MulticallRequest<string>
    coinSavingsAccount(
        multicall?: true
    ): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"coinSavingsAccount","outputs":[{"internalType":"contract CoinSavingsAccount","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    coinSavingsAccountFactory(): Promise<string>
    coinSavingsAccountFactory(multicall: true): MulticallRequest<string>
    coinSavingsAccountFactory(
        multicall?: true
    ): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"coinSavingsAccountFactory","outputs":[{"internalType":"contract CoinSavingsAccountFactory","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    collateralTypes(
        bytes: BytesLike
    ): Promise<{
        englishCollateralAuctionHouse: string
        fixedDiscountCollateralAuctionHouse: string
        adapter: string
    }>
    collateralTypes(
        bytes: BytesLike,
        multicall: true
    ): MulticallRequest<{
        englishCollateralAuctionHouse: string
        fixedDiscountCollateralAuctionHouse: string
        adapter: string
    }>
    collateralTypes(
        bytes: BytesLike,
        multicall?: true
    ):
        | Promise<{
              englishCollateralAuctionHouse: string
              fixedDiscountCollateralAuctionHouse: string
              adapter: string
          }>
        | MulticallRequest<{
              englishCollateralAuctionHouse: string
              fixedDiscountCollateralAuctionHouse: string
              adapter: string
          }> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"collateralTypes","outputs":[{"internalType":"contract EnglishCollateralAuctionHouse","name":"englishCollateralAuctionHouse","type":"address"},{"internalType":"contract FixedDiscountCollateralAuctionHouse","name":"fixedDiscountCollateralAuctionHouse","type":"address"},{"internalType":"address","name":"adapter","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [bytes], multicall)
    }

    debtAuctionHouse(): Promise<string>
    debtAuctionHouse(multicall: true): MulticallRequest<string>
    debtAuctionHouse(
        multicall?: true
    ): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"debtAuctionHouse","outputs":[{"internalType":"contract DebtAuctionHouse","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    debtAuctionHouseFactory(): Promise<string>
    debtAuctionHouseFactory(multicall: true): MulticallRequest<string>
    debtAuctionHouseFactory(
        multicall?: true
    ): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"debtAuctionHouseFactory","outputs":[{"internalType":"contract DebtAuctionHouseFactory","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    deployAccountingEngine(): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"deployAccountingEngine","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [])
    }

    deployAuctions(
        prot: string,
        surplusProtTokenReceiver: string,
        surplusAuctionHouseType: BytesLike
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"prot","type":"address"},{"internalType":"address","name":"surplusProtTokenReceiver","type":"address"},{"internalType":"bytes32","name":"surplusAuctionHouseType","type":"bytes32"}],"name":"deployAuctions","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [
            prot,
            surplusProtTokenReceiver,
            surplusAuctionHouseType,
        ])
    }

    deployCoin(
        name: string,
        symbol: string,
        chainId: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"}],"name":"deployCoin","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [name, symbol, chainId])
    }

    deployCollateral(
        auctionHouseType: BytesLike,
        collateralType: BytesLike,
        adapter: string,
        collateralFSM: string,
        systemCoinOracle: string
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"bytes32","name":"auctionHouseType","type":"bytes32"},{"internalType":"bytes32","name":"collateralType","type":"bytes32"},{"internalType":"address","name":"adapter","type":"address"},{"internalType":"address","name":"collateralFSM","type":"address"},{"internalType":"address","name":"systemCoinOracle","type":"address"}],"name":"deployCollateral","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [
            auctionHouseType,
            collateralType,
            adapter,
            collateralFSM,
            systemCoinOracle,
        ])
    }

    deployLiquidator(): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"deployLiquidator","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [])
    }

    deployPause(delay: BigNumberish, authority: string): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"uint256","name":"delay","type":"uint256"},{"internalType":"contract DSAuthority","name":"authority","type":"address"}],"name":"deployPause","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [delay, authority])
    }

    deployProtestPause(
        protesterLifetime: BigNumberish,
        delay: BigNumberish,
        authority: string
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"uint256","name":"protesterLifetime","type":"uint256"},{"internalType":"uint256","name":"delay","type":"uint256"},{"internalType":"contract DSAuthority","name":"authority","type":"address"}],"name":"deployProtestPause","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [
            protesterLifetime,
            delay,
            authority,
        ])
    }

    deploySAFEEngine(): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"deploySAFEEngine","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [])
    }

    deploySavingsAccount(): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"deploySavingsAccount","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [])
    }

    deployShutdown(
        prot: string,
        tokenBurner: string,
        thresholdSetter: string,
        threshold: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"prot","type":"address"},{"internalType":"address","name":"tokenBurner","type":"address"},{"internalType":"address","name":"thresholdSetter","type":"address"},{"internalType":"uint256","name":"threshold","type":"uint256"}],"name":"deployShutdown","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [
            prot,
            tokenBurner,
            thresholdSetter,
            threshold,
        ])
    }

    deployStabilityFeeTreasury(): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"deployStabilityFeeTreasury","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [])
    }

    deployTaxation(): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"deployTaxation","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [])
    }

    englishCollateralAuctionHouseFactory(): Promise<string>
    englishCollateralAuctionHouseFactory(
        multicall: true
    ): MulticallRequest<string>
    englishCollateralAuctionHouseFactory(
        multicall?: true
    ): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"englishCollateralAuctionHouseFactory","outputs":[{"internalType":"contract EnglishCollateralAuctionHouseFactory","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    esm(): Promise<string>
    esm(multicall: true): MulticallRequest<string>
    esm(multicall?: true): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"esm","outputs":[{"internalType":"contract ESM","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    esmFactory(): Promise<string>
    esmFactory(multicall: true): MulticallRequest<string>
    esmFactory(multicall?: true): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"esmFactory","outputs":[{"internalType":"contract ESMFactory","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    fixedDiscountCollateralAuctionHouseFactory(): Promise<string>
    fixedDiscountCollateralAuctionHouseFactory(
        multicall: true
    ): MulticallRequest<string>
    fixedDiscountCollateralAuctionHouseFactory(
        multicall?: true
    ): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"fixedDiscountCollateralAuctionHouseFactory","outputs":[{"internalType":"contract FixedDiscountCollateralAuctionHouseFactory","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    giveControl__Address(usr: string): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"usr","type":"address"}],"name":"giveControl","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [usr])
    }

    giveControl__AddressAddress(
        usr: string,
        target: string
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"usr","type":"address"},{"internalType":"address","name":"target","type":"address"}],"name":"giveControl","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [usr, target])
    }

    globalSettlement(): Promise<string>
    globalSettlement(multicall: true): MulticallRequest<string>
    globalSettlement(
        multicall?: true
    ): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"globalSettlement","outputs":[{"internalType":"contract GlobalSettlement","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    globalSettlementFactory(): Promise<string>
    globalSettlementFactory(multicall: true): MulticallRequest<string>
    globalSettlementFactory(
        multicall?: true
    ): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"globalSettlementFactory","outputs":[{"internalType":"contract GlobalSettlementFactory","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    liquidationEngine(): Promise<string>
    liquidationEngine(multicall: true): MulticallRequest<string>
    liquidationEngine(
        multicall?: true
    ): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"liquidationEngine","outputs":[{"internalType":"contract LiquidationEngine","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    liquidationEngineFactory(): Promise<string>
    liquidationEngineFactory(multicall: true): MulticallRequest<string>
    liquidationEngineFactory(
        multicall?: true
    ): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"liquidationEngineFactory","outputs":[{"internalType":"contract LiquidationEngineFactory","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    oracleRelayer(): Promise<string>
    oracleRelayer(multicall: true): MulticallRequest<string>
    oracleRelayer(
        multicall?: true
    ): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"oracleRelayer","outputs":[{"internalType":"contract OracleRelayer","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    oracleRelayerFactory(): Promise<string>
    oracleRelayerFactory(multicall: true): MulticallRequest<string>
    oracleRelayerFactory(
        multicall?: true
    ): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"oracleRelayerFactory","outputs":[{"internalType":"contract OracleRelayerFactory","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    owner(): Promise<string>
    owner(multicall: true): MulticallRequest<string>
    owner(multicall?: true): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    pause(): Promise<string>
    pause(multicall: true): MulticallRequest<string>
    pause(multicall?: true): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"pause","outputs":[{"internalType":"contract DSPause","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    pauseFactory(): Promise<string>
    pauseFactory(multicall: true): MulticallRequest<string>
    pauseFactory(multicall?: true): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"pauseFactory","outputs":[{"internalType":"contract PauseFactory","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    protestPause(): Promise<string>
    protestPause(multicall: true): MulticallRequest<string>
    protestPause(multicall?: true): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"protestPause","outputs":[{"internalType":"contract DSProtestPause","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    protestPauseFactory(): Promise<string>
    protestPauseFactory(multicall: true): MulticallRequest<string>
    protestPauseFactory(
        multicall?: true
    ): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"protestPauseFactory","outputs":[{"internalType":"contract ProtestPauseFactory","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    recyclingSurplusAuctionHouse(): Promise<string>
    recyclingSurplusAuctionHouse(multicall: true): MulticallRequest<string>
    recyclingSurplusAuctionHouse(
        multicall?: true
    ): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"recyclingSurplusAuctionHouse","outputs":[{"internalType":"contract RecyclingSurplusAuctionHouse","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    recyclingSurplusAuctionHouseFactory(): Promise<string>
    recyclingSurplusAuctionHouseFactory(
        multicall: true
    ): MulticallRequest<string>
    recyclingSurplusAuctionHouseFactory(
        multicall?: true
    ): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"recyclingSurplusAuctionHouseFactory","outputs":[{"internalType":"contract RecyclingSurplusAuctionHouseFactory","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    releaseAuth(): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"releaseAuth","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [])
    }

    releaseAuthCollateralAuctionHouse(
        collateralType: BytesLike,
        usr: string
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"bytes32","name":"collateralType","type":"bytes32"},{"internalType":"address","name":"usr","type":"address"}],"name":"releaseAuthCollateralAuctionHouse","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [collateralType, usr])
    }

    safeEngine(): Promise<string>
    safeEngine(multicall: true): MulticallRequest<string>
    safeEngine(multicall?: true): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"safeEngine","outputs":[{"internalType":"contract SAFEEngine","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    safeEngineFactory(): Promise<string>
    safeEngineFactory(multicall: true): MulticallRequest<string>
    safeEngineFactory(
        multicall?: true
    ): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"safeEngineFactory","outputs":[{"internalType":"contract SAFEEngineFactory","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    setAuthority(authority_: string): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"contract DSAuthority","name":"authority_","type":"address"}],"name":"setAuthority","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [authority_])
    }

    setFirstFactoryBatch(
        safeEngineFactory_: string,
        taxCollectorFactory_: string,
        accountingEngineFactory_: string,
        liquidationEngineFactory_: string,
        coinFactory_: string,
        coinJoinFactory_: string,
        coinSavingsAccountFactory_: string
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"contract SAFEEngineFactory","name":"safeEngineFactory_","type":"address"},{"internalType":"contract TaxCollectorFactory","name":"taxCollectorFactory_","type":"address"},{"internalType":"contract AccountingEngineFactory","name":"accountingEngineFactory_","type":"address"},{"internalType":"contract LiquidationEngineFactory","name":"liquidationEngineFactory_","type":"address"},{"internalType":"contract CoinFactory","name":"coinFactory_","type":"address"},{"internalType":"contract CoinJoinFactory","name":"coinJoinFactory_","type":"address"},{"internalType":"contract CoinSavingsAccountFactory","name":"coinSavingsAccountFactory_","type":"address"}],"name":"setFirstFactoryBatch","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [
            safeEngineFactory_,
            taxCollectorFactory_,
            accountingEngineFactory_,
            liquidationEngineFactory_,
            coinFactory_,
            coinJoinFactory_,
            coinSavingsAccountFactory_,
        ])
    }

    setOwner(owner_: string): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"owner_","type":"address"}],"name":"setOwner","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [owner_])
    }

    setSecondFactoryBatch(
        recyclingSurplusAuctionHouseFactory_: string,
        burningSurplusAuctionHouseFactory_: string,
        debtAuctionHouseFactory_: string,
        englishCollateralAuctionHouseFactory_: string,
        fixedDiscountCollateralAuctionHouseFactory_: string,
        oracleRelayerFactory_: string,
        globalSettlementFactory_: string,
        esmFactory_: string
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"contract RecyclingSurplusAuctionHouseFactory","name":"recyclingSurplusAuctionHouseFactory_","type":"address"},{"internalType":"contract BurningSurplusAuctionHouseFactory","name":"burningSurplusAuctionHouseFactory_","type":"address"},{"internalType":"contract DebtAuctionHouseFactory","name":"debtAuctionHouseFactory_","type":"address"},{"internalType":"contract EnglishCollateralAuctionHouseFactory","name":"englishCollateralAuctionHouseFactory_","type":"address"},{"internalType":"contract FixedDiscountCollateralAuctionHouseFactory","name":"fixedDiscountCollateralAuctionHouseFactory_","type":"address"},{"internalType":"contract OracleRelayerFactory","name":"oracleRelayerFactory_","type":"address"},{"internalType":"contract GlobalSettlementFactory","name":"globalSettlementFactory_","type":"address"},{"internalType":"contract ESMFactory","name":"esmFactory_","type":"address"}],"name":"setSecondFactoryBatch","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [
            recyclingSurplusAuctionHouseFactory_,
            burningSurplusAuctionHouseFactory_,
            debtAuctionHouseFactory_,
            englishCollateralAuctionHouseFactory_,
            fixedDiscountCollateralAuctionHouseFactory_,
            oracleRelayerFactory_,
            globalSettlementFactory_,
            esmFactory_,
        ])
    }

    setThirdFactoryBatch(
        pauseFactory_: string,
        protestPauseFactory_: string,
        stabilityFeeTreasuryFactory_: string
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"contract PauseFactory","name":"pauseFactory_","type":"address"},{"internalType":"contract ProtestPauseFactory","name":"protestPauseFactory_","type":"address"},{"internalType":"contract StabilityFeeTreasuryFactory","name":"stabilityFeeTreasuryFactory_","type":"address"}],"name":"setThirdFactoryBatch","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [
            pauseFactory_,
            protestPauseFactory_,
            stabilityFeeTreasuryFactory_,
        ])
    }

    stabilityFeeTreasury(): Promise<string>
    stabilityFeeTreasury(multicall: true): MulticallRequest<string>
    stabilityFeeTreasury(
        multicall?: true
    ): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"stabilityFeeTreasury","outputs":[{"internalType":"contract StabilityFeeTreasury","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    stabilityFeeTreasuryFactory(): Promise<string>
    stabilityFeeTreasuryFactory(multicall: true): MulticallRequest<string>
    stabilityFeeTreasuryFactory(
        multicall?: true
    ): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"stabilityFeeTreasuryFactory","outputs":[{"internalType":"contract StabilityFeeTreasuryFactory","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    takeControl__AddressAddress(
        usr: string,
        target: string
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"usr","type":"address"},{"internalType":"address","name":"target","type":"address"}],"name":"takeControl","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [usr, target])
    }

    takeControl__Address(usr: string): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"usr","type":"address"}],"name":"takeControl","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [usr])
    }

    taxCollector(): Promise<string>
    taxCollector(multicall: true): MulticallRequest<string>
    taxCollector(multicall?: true): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"taxCollector","outputs":[{"internalType":"contract TaxCollector","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    taxCollectorFactory(): Promise<string>
    taxCollectorFactory(multicall: true): MulticallRequest<string>
    taxCollectorFactory(
        multicall?: true
    ): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"taxCollectorFactory","outputs":[{"internalType":"contract TaxCollectorFactory","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }
}
