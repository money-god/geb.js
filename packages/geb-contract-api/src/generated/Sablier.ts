/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { BaseContractAPI } from '@money-god/geb-contract-base'
import { MulticallRequest } from '@money-god/geb-contract-base'
import { TransactionRequest } from '@money-god/geb-contract-base'
import { BigNumberish } from '@ethersproject/bignumber'
import { BigNumber } from '@ethersproject/bignumber'

export class Sablier extends BaseContractAPI {
    balanceOf(streamId: BigNumberish, who: string): Promise<BigNumber>
    balanceOf(
        streamId: BigNumberish,
        who: string,
        multicall: true
    ): MulticallRequest<BigNumber>
    balanceOf(
        streamId: BigNumberish,
        who: string,
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"constant":true,"inputs":[{"internalType":"uint256","name":"streamId","type":"uint256"},{"internalType":"address","name":"who","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [streamId, who], multicall)
    }

    cancelStream(streamId: BigNumberish): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"constant":false,"inputs":[{"internalType":"uint256","name":"streamId","type":"uint256"}],"name":"cancelStream","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [streamId])
    }

    createStream(
        recipient: string,
        deposit: BigNumberish,
        tokenAddress: string,
        startTime: BigNumberish,
        stopTime: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"constant":false,"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"deposit","type":"uint256"},{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"stopTime","type":"uint256"}],"name":"createStream","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [
            recipient,
            deposit,
            tokenAddress,
            startTime,
            stopTime,
        ])
    }

    deltaOf(streamId: BigNumberish): Promise<BigNumber>
    deltaOf(
        streamId: BigNumberish,
        multicall: true
    ): MulticallRequest<BigNumber>
    deltaOf(
        streamId: BigNumberish,
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"constant":true,"inputs":[{"internalType":"uint256","name":"streamId","type":"uint256"}],"name":"deltaOf","outputs":[{"internalType":"uint256","name":"delta","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [streamId], multicall)
    }

    getStream(
        streamId: BigNumberish
    ): Promise<{
        sender: string
        recipient: string
        deposit: BigNumber
        tokenAddress: string
        startTime: BigNumber
        stopTime: BigNumber
        remainingBalance: BigNumber
        ratePerSecond: BigNumber
    }>
    getStream(
        streamId: BigNumberish,
        multicall: true
    ): MulticallRequest<{
        sender: string
        recipient: string
        deposit: BigNumber
        tokenAddress: string
        startTime: BigNumber
        stopTime: BigNumber
        remainingBalance: BigNumber
        ratePerSecond: BigNumber
    }>
    getStream(
        streamId: BigNumberish,
        multicall?: true
    ):
        | Promise<{
              sender: string
              recipient: string
              deposit: BigNumber
              tokenAddress: string
              startTime: BigNumber
              stopTime: BigNumber
              remainingBalance: BigNumber
              ratePerSecond: BigNumber
          }>
        | MulticallRequest<{
              sender: string
              recipient: string
              deposit: BigNumber
              tokenAddress: string
              startTime: BigNumber
              stopTime: BigNumber
              remainingBalance: BigNumber
              ratePerSecond: BigNumber
          }> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"constant":true,"inputs":[{"internalType":"uint256","name":"streamId","type":"uint256"}],"name":"getStream","outputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"deposit","type":"uint256"},{"internalType":"address","name":"tokenAddress","type":"address"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"stopTime","type":"uint256"},{"internalType":"uint256","name":"remainingBalance","type":"uint256"},{"internalType":"uint256","name":"ratePerSecond","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [streamId], multicall)
    }

    nextStreamId(): Promise<BigNumber>
    nextStreamId(multicall: true): MulticallRequest<BigNumber>
    nextStreamId(
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"constant":true,"inputs":[],"name":"nextStreamId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    withdrawFromStream(
        streamId: BigNumberish,
        amount: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"constant":false,"inputs":[{"internalType":"uint256","name":"streamId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdrawFromStream","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [streamId, amount])
    }
}
