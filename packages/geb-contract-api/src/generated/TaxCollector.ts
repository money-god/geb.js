/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { BaseContractAPI } from '@reflexer-finance/geb-contract-base'
import { MulticallRequest } from '@reflexer-finance/geb-contract-base'
import { TransactionRequest } from '@reflexer-finance/geb-contract-base'
import { BytesLike } from '@ethersproject/bytes'
import { BigNumberish } from '@ethersproject/bignumber'
import { BigNumber } from '@ethersproject/bignumber'

export class TaxCollector extends BaseContractAPI {
    INT256_MIN(): Promise<BigNumber>
    INT256_MIN(multicall: true): MulticallRequest<BigNumber>
    INT256_MIN(
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"INT256_MIN","outputs":[{"internalType":"int256","name":"","type":"int256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    ONE(): Promise<BigNumber>
    ONE(multicall: true): MulticallRequest<BigNumber>
    ONE(multicall?: true): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"ONE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    RAY(): Promise<BigNumber>
    RAY(multicall: true): MulticallRequest<BigNumber>
    RAY(multicall?: true): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"RAY","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    WHOLE_TAX_CUT(): Promise<BigNumber>
    WHOLE_TAX_CUT(multicall: true): MulticallRequest<BigNumber>
    WHOLE_TAX_CUT(
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"WHOLE_TAX_CUT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    addAuthorization(account: string): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"addAuthorization","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [account])
    }

    authorizedAccounts(address: string): Promise<BigNumber>
    authorizedAccounts(
        address: string,
        multicall: true
    ): MulticallRequest<BigNumber>
    authorizedAccounts(
        address: string,
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"authorizedAccounts","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [address], multicall)
    }

    collateralList(uinteger: BigNumberish): Promise<string>
    collateralList(
        uinteger: BigNumberish,
        multicall: true
    ): MulticallRequest<string>
    collateralList(
        uinteger: BigNumberish,
        multicall?: true
    ): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"collateralList","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [uinteger], multicall)
    }

    collateralListLength(): Promise<BigNumber>
    collateralListLength(multicall: true): MulticallRequest<BigNumber>
    collateralListLength(
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"collateralListLength","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    collateralTypes(
        bytes: BytesLike
    ): Promise<{
        stabilityFee: BigNumber
        updateTime: BigNumber
    }>
    collateralTypes(
        bytes: BytesLike,
        multicall: true
    ): MulticallRequest<{
        stabilityFee: BigNumber
        updateTime: BigNumber
    }>
    collateralTypes(
        bytes: BytesLike,
        multicall?: true
    ):
        | Promise<{
              stabilityFee: BigNumber
              updateTime: BigNumber
          }>
        | MulticallRequest<{
              stabilityFee: BigNumber
              updateTime: BigNumber
          }> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"collateralTypes","outputs":[{"internalType":"uint256","name":"stabilityFee","type":"uint256"},{"internalType":"uint256","name":"updateTime","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [bytes], multicall)
    }

    collectedManyTax(start: BigNumberish, end: BigNumberish): Promise<boolean>
    collectedManyTax(
        start: BigNumberish,
        end: BigNumberish,
        multicall: true
    ): MulticallRequest<boolean>
    collectedManyTax(
        start: BigNumberish,
        end: BigNumberish,
        multicall?: true
    ): Promise<boolean> | MulticallRequest<boolean> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"uint256","name":"start","type":"uint256"},{"internalType":"uint256","name":"end","type":"uint256"}],"name":"collectedManyTax","outputs":[{"internalType":"bool","name":"ok","type":"bool"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [start, end], multicall)
    }

    globalStabilityFee(): Promise<BigNumber>
    globalStabilityFee(multicall: true): MulticallRequest<BigNumber>
    globalStabilityFee(
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"globalStabilityFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    initializeCollateralType(collateralType: BytesLike): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"bytes32","name":"collateralType","type":"bytes32"}],"name":"initializeCollateralType","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [collateralType])
    }

    isSecondaryReceiver(_receiver: BigNumberish): Promise<boolean>
    isSecondaryReceiver(
        _receiver: BigNumberish,
        multicall: true
    ): MulticallRequest<boolean>
    isSecondaryReceiver(
        _receiver: BigNumberish,
        multicall?: true
    ): Promise<boolean> | MulticallRequest<boolean> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"uint256","name":"_receiver","type":"uint256"}],"name":"isSecondaryReceiver","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [_receiver], multicall)
    }

    latestSecondaryReceiver(): Promise<BigNumber>
    latestSecondaryReceiver(multicall: true): MulticallRequest<BigNumber>
    latestSecondaryReceiver(
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"latestSecondaryReceiver","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    maxSecondaryReceivers(): Promise<BigNumber>
    maxSecondaryReceivers(multicall: true): MulticallRequest<BigNumber>
    maxSecondaryReceivers(
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"maxSecondaryReceivers","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    modifyParameters__Bytes32Uint256Uint256Address(
        collateralType: BytesLike,
        position: BigNumberish,
        taxPercentage: BigNumberish,
        receiverAccount: string
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"bytes32","name":"collateralType","type":"bytes32"},{"internalType":"uint256","name":"position","type":"uint256"},{"internalType":"uint256","name":"taxPercentage","type":"uint256"},{"internalType":"address","name":"receiverAccount","type":"address"}],"name":"modifyParameters","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [
            collateralType,
            position,
            taxPercentage,
            receiverAccount,
        ])
    }

    modifyParameters__Bytes32Uint256Uint256(
        collateralType: BytesLike,
        position: BigNumberish,
        val: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"bytes32","name":"collateralType","type":"bytes32"},{"internalType":"uint256","name":"position","type":"uint256"},{"internalType":"uint256","name":"val","type":"uint256"}],"name":"modifyParameters","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [collateralType, position, val])
    }

    modifyParameters__Bytes32Address(
        parameter: BytesLike,
        data: string
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"bytes32","name":"parameter","type":"bytes32"},{"internalType":"address","name":"data","type":"address"}],"name":"modifyParameters","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [parameter, data])
    }

    modifyParameters__Bytes32Bytes32Uint256(
        collateralType: BytesLike,
        parameter: BytesLike,
        data: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"bytes32","name":"collateralType","type":"bytes32"},{"internalType":"bytes32","name":"parameter","type":"bytes32"},{"internalType":"uint256","name":"data","type":"uint256"}],"name":"modifyParameters","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [
            collateralType,
            parameter,
            data,
        ])
    }

    modifyParameters__Bytes32Uint256(
        parameter: BytesLike,
        data: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"bytes32","name":"parameter","type":"bytes32"},{"internalType":"uint256","name":"data","type":"uint256"}],"name":"modifyParameters","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [parameter, data])
    }

    primaryTaxReceiver(): Promise<string>
    primaryTaxReceiver(multicall: true): MulticallRequest<string>
    primaryTaxReceiver(
        multicall?: true
    ): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"primaryTaxReceiver","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    removeAuthorization(account: string): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"removeAuthorization","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [account])
    }

    safeEngine(): Promise<string>
    safeEngine(multicall: true): MulticallRequest<string>
    safeEngine(multicall?: true): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"safeEngine","outputs":[{"internalType":"contract SAFEEngineLike","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    secondaryReceiverAccounts(uinteger: BigNumberish): Promise<string>
    secondaryReceiverAccounts(
        uinteger: BigNumberish,
        multicall: true
    ): MulticallRequest<string>
    secondaryReceiverAccounts(
        uinteger: BigNumberish,
        multicall?: true
    ): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"secondaryReceiverAccounts","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [uinteger], multicall)
    }

    secondaryReceiverAllotedTax(bytes: BytesLike): Promise<BigNumber>
    secondaryReceiverAllotedTax(
        bytes: BytesLike,
        multicall: true
    ): MulticallRequest<BigNumber>
    secondaryReceiverAllotedTax(
        bytes: BytesLike,
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"secondaryReceiverAllotedTax","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [bytes], multicall)
    }

    secondaryReceiverNonce(): Promise<BigNumber>
    secondaryReceiverNonce(multicall: true): MulticallRequest<BigNumber>
    secondaryReceiverNonce(
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"secondaryReceiverNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    secondaryReceiverRevenueSources(address: string): Promise<BigNumber>
    secondaryReceiverRevenueSources(
        address: string,
        multicall: true
    ): MulticallRequest<BigNumber>
    secondaryReceiverRevenueSources(
        address: string,
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"secondaryReceiverRevenueSources","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [address], multicall)
    }

    secondaryReceiversAmount(): Promise<BigNumber>
    secondaryReceiversAmount(multicall: true): MulticallRequest<BigNumber>
    secondaryReceiversAmount(
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"secondaryReceiversAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    secondaryTaxReceivers(
        bytes: BytesLike,
        uinteger: BigNumberish
    ): Promise<{
        canTakeBackTax: BigNumber
        taxPercentage: BigNumber
    }>
    secondaryTaxReceivers(
        bytes: BytesLike,
        uinteger: BigNumberish,
        multicall: true
    ): MulticallRequest<{
        canTakeBackTax: BigNumber
        taxPercentage: BigNumber
    }>
    secondaryTaxReceivers(
        bytes: BytesLike,
        uinteger: BigNumberish,
        multicall?: true
    ):
        | Promise<{
              canTakeBackTax: BigNumber
              taxPercentage: BigNumber
          }>
        | MulticallRequest<{
              canTakeBackTax: BigNumber
              taxPercentage: BigNumber
          }> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"secondaryTaxReceivers","outputs":[{"internalType":"uint256","name":"canTakeBackTax","type":"uint256"},{"internalType":"uint256","name":"taxPercentage","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [bytes, uinteger], multicall)
    }

    taxMany(start: BigNumberish, end: BigNumberish): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"uint256","name":"start","type":"uint256"},{"internalType":"uint256","name":"end","type":"uint256"}],"name":"taxMany","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [start, end])
    }

    taxManyOutcome(
        start: BigNumberish,
        end: BigNumberish
    ): Promise<{
        ok: boolean
        rad: BigNumber
    }>
    taxManyOutcome(
        start: BigNumberish,
        end: BigNumberish,
        multicall: true
    ): MulticallRequest<{
        ok: boolean
        rad: BigNumber
    }>
    taxManyOutcome(
        start: BigNumberish,
        end: BigNumberish,
        multicall?: true
    ):
        | Promise<{
              ok: boolean
              rad: BigNumber
          }>
        | MulticallRequest<{
              ok: boolean
              rad: BigNumber
          }> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"uint256","name":"start","type":"uint256"},{"internalType":"uint256","name":"end","type":"uint256"}],"name":"taxManyOutcome","outputs":[{"internalType":"bool","name":"ok","type":"bool"},{"internalType":"int256","name":"rad","type":"int256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [start, end], multicall)
    }

    taxSingle(collateralType: BytesLike): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"bytes32","name":"collateralType","type":"bytes32"}],"name":"taxSingle","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [collateralType])
    }

    taxSingleOutcome(
        collateralType: BytesLike
    ): Promise<{
        0: BigNumber
        1: BigNumber
    }>
    taxSingleOutcome(
        collateralType: BytesLike,
        multicall: true
    ): MulticallRequest<{
        0: BigNumber
        1: BigNumber
    }>
    taxSingleOutcome(
        collateralType: BytesLike,
        multicall?: true
    ):
        | Promise<{
              0: BigNumber
              1: BigNumber
          }>
        | MulticallRequest<{
              0: BigNumber
              1: BigNumber
          }> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"bytes32","name":"collateralType","type":"bytes32"}],"name":"taxSingleOutcome","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"int256","name":"","type":"int256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [collateralType], multicall)
    }

    usedSecondaryReceiver(address: string): Promise<BigNumber>
    usedSecondaryReceiver(
        address: string,
        multicall: true
    ): MulticallRequest<BigNumber>
    usedSecondaryReceiver(
        address: string,
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"usedSecondaryReceiver","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [address], multicall)
    }
}
