/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { BaseContractAPI } from '@money-god/geb-contract-base'
import { TransactionRequest } from '@money-god/geb-contract-base'
import { BytesLike } from '@ethersproject/bytes'
import { BigNumberish } from '@ethersproject/bignumber'
import { BigNumber } from '@ethersproject/bignumber'

export class BasicActions extends BaseContractAPI {
    /**
     * Allow/disallow a usr address to quit to the sender handler
     * @param manager address - Safe Manager
     * @param usr address - usr address uint ok - 1 for allowed
     */

    allowHandler(
        manager: string,
        usr: string,
        ok: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"usr","type":"address"},{"internalType":"uint256","name":"ok","type":"uint256"}],"name":"allowHandler","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [manager, usr, ok])
    }

    /**
     * Allow/disallow a usr address to manage the safe
     * @param manager address - Safe Manager
     * @param safe uint - Safe Id
     * @param usr address - usr address uint ok - 1 for allowed
     */

    allowSAFE(
        manager: string,
        safe: BigNumberish,
        usr: string,
        ok: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"address","name":"usr","type":"address"},{"internalType":"uint256","name":"ok","type":"uint256"}],"name":"allowSAFE","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [manager, safe, usr, ok])
    }

    /**
     * Approves an address to modify the Safe
     * @param safeEngine address
     * @param usr address - Address allowed to modify Safe
     */

    approveSAFEModification(
        safeEngine: string,
        usr: string
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"safeEngine","type":"address"},{"internalType":"address","name":"usr","type":"address"}],"name":"approveSAFEModification","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [safeEngine, usr])
    }

    coinJoin_join(
        apt: string,
        safeHandler: string,
        wad: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"apt","type":"address"},{"internalType":"address","name":"safeHandler","type":"address"},{"internalType":"uint256","name":"wad","type":"uint256"}],"name":"coinJoin_join","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [apt, safeHandler, wad])
    }

    /**
     * Denies an address to modify the Safe
     * @param safeEngine address
     * @param usr address - Address disallowed to modify Safe
     */

    denySAFEModification(safeEngine: string, usr: string): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"safeEngine","type":"address"},{"internalType":"address","name":"usr","type":"address"}],"name":"denySAFEModification","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [safeEngine, usr])
    }

    /**
     * Import a position from src handler to the handler owned by safe
     * @param manager address - Safe Manager
     * @param safe uint - Safe Id
     * @param src - source handler
     */

    enterSystem(
        manager: string,
        src: string,
        safe: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"src","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"}],"name":"enterSystem","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [manager, src, safe])
    }

    /**
     * Joins the system with the full msg.value
     * @param apt address - Address of the adapter
     * @param safe uint - Safe Id
     */

    ethJoin_join__AddressAddress(
        ethValue: BigNumberish,
        apt: string,
        safe: string
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"apt","type":"address"},{"internalType":"address","name":"safe","type":"address"}],"name":"ethJoin_join","outputs":[],"stateMutability":"payable","type":"function"}

        return this.getTransactionRequest(
            abi,
            [apt, safe],
            BigNumber.from(ethValue)
        )
    }

    /**
     * Joins the system with the a specified value
     * @param apt address - Address of the adapter
     * @param safe uint - Safe Id
     * @param value uint - Value to join
     */

    ethJoin_join__AddressAddressUint256(
        ethValue: BigNumberish,
        apt: string,
        safe: string,
        value: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"apt","type":"address"},{"internalType":"address","name":"safe","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"ethJoin_join","outputs":[],"stateMutability":"payable","type":"function"}

        return this.getTransactionRequest(
            abi,
            [apt, safe, value],
            BigNumber.from(ethValue)
        )
    }

    /**
     * Exits ETH (wad) from balance available in the handler
     * @param ethJoin address
     * @param manager address - Safe Manager
     * @param safe uint - Safe Id
     * @param wad uint - Amount
     */

    exitETH(
        manager: string,
        ethJoin: string,
        safe: BigNumberish,
        wad: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"ethJoin","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"uint256","name":"wad","type":"uint256"}],"name":"exitETH","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [manager, ethJoin, safe, wad])
    }

    /**
     * Free ETH (wad) from safe and sends it to msg.sender
     * @param ethJoin address
     * @param manager address - Safe Manager
     * @param safe uint - Safe Id
     * @param wad uint - Amount
     */

    freeETH(
        manager: string,
        ethJoin: string,
        safe: BigNumberish,
        wad: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"ethJoin","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"uint256","name":"wad","type":"uint256"}],"name":"freeETH","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [manager, ethJoin, safe, wad])
    }

    /**
     * Generates debt and sends COIN amount to msg.sender
     * @param coinJoin address
     * @param manager address
     * @param safe uint - Safe Id
     * @param taxCollector address
     * @param wad uint - Amount
     */

    generateDebt(
        manager: string,
        taxCollector: string,
        coinJoin: string,
        safe: BigNumberish,
        wad: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"taxCollector","type":"address"},{"internalType":"address","name":"coinJoin","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"uint256","name":"wad","type":"uint256"}],"name":"generateDebt","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [
            manager,
            taxCollector,
            coinJoin,
            safe,
            wad,
        ])
    }

    /**
     * Lock ETH (msg.value) as collateral in safe
     * @param ethJoin address
     * @param manager address - Safe Manager
     * @param safe uint - Safe Id
     */

    lockETH(
        ethValue: BigNumberish,
        manager: string,
        ethJoin: string,
        safe: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"ethJoin","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"}],"name":"lockETH","outputs":[],"stateMutability":"payable","type":"function"}

        return this.getTransactionRequest(
            abi,
            [manager, ethJoin, safe],
            BigNumber.from(ethValue)
        )
    }

    /**
     * Locks Eth, generates debt and sends COIN amount (deltaWad) to msg.sender
     * @param coinJoin address
     * @param deltaWad uint - Amount
     * @param ethJoin address
     * @param manager address
     * @param safe uint - Safe Id
     * @param taxCollector address
     */

    lockETHAndGenerateDebt(
        ethValue: BigNumberish,
        manager: string,
        taxCollector: string,
        ethJoin: string,
        coinJoin: string,
        safe: BigNumberish,
        deltaWad: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"taxCollector","type":"address"},{"internalType":"address","name":"ethJoin","type":"address"},{"internalType":"address","name":"coinJoin","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"uint256","name":"deltaWad","type":"uint256"}],"name":"lockETHAndGenerateDebt","outputs":[],"stateMutability":"payable","type":"function"}

        return this.getTransactionRequest(
            abi,
            [manager, taxCollector, ethJoin, coinJoin, safe, deltaWad],
            BigNumber.from(ethValue)
        )
    }

    /**
     * Modify a SAFE's collateralization ratio while keeping the generated COIN or collateral freed in the SAFE handler address.
     * @param deltaCollateral - int
     * @param deltaDebt - int
     * @param manager address - Safe Manager
     * @param safe uint - Safe Id
     */

    modifySAFECollateralization(
        manager: string,
        safe: BigNumberish,
        deltaCollateral: BigNumberish,
        deltaDebt: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"int256","name":"deltaCollateral","type":"int256"},{"internalType":"int256","name":"deltaDebt","type":"int256"}],"name":"modifySAFECollateralization","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [
            manager,
            safe,
            deltaCollateral,
            deltaDebt,
        ])
    }

    /**
     * Move a position from safeSrc handler to the safeDst handler
     * @param manager address - Safe Manager
     * @param safeDst uint - Destination Safe Id
     * @param safeSrc uint - Source Safe Id
     */

    moveSAFE(
        manager: string,
        safeSrc: BigNumberish,
        safeDst: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"uint256","name":"safeSrc","type":"uint256"},{"internalType":"uint256","name":"safeDst","type":"uint256"}],"name":"moveSAFE","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [manager, safeSrc, safeDst])
    }

    /**
     * Opens Safe, locks Eth, generates debt and sends COIN amount (deltaWad) to msg.sender
     * @param coinJoin address
     * @param deltaWad uint - Amount
     * @param ethJoin address
     * @param manager address
     * @param taxCollector address
     */

    openLockETHAndGenerateDebt(
        ethValue: BigNumberish,
        manager: string,
        taxCollector: string,
        ethJoin: string,
        coinJoin: string,
        collateralType: BytesLike,
        deltaWad: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"taxCollector","type":"address"},{"internalType":"address","name":"ethJoin","type":"address"},{"internalType":"address","name":"coinJoin","type":"address"},{"internalType":"bytes32","name":"collateralType","type":"bytes32"},{"internalType":"uint256","name":"deltaWad","type":"uint256"}],"name":"openLockETHAndGenerateDebt","outputs":[{"internalType":"uint256","name":"safe","type":"uint256"}],"stateMutability":"payable","type":"function"}

        return this.getTransactionRequest(
            abi,
            [
                manager,
                taxCollector,
                ethJoin,
                coinJoin,
                collateralType,
                deltaWad,
            ],
            BigNumber.from(ethValue)
        )
    }

    /**
     * Opens a brand new Safe
     * @param collateralType bytes32 - collateral type
     * @param manager address - Safe Manager
     * @param usr address - Owner of the safe
     */

    openSAFE(
        manager: string,
        collateralType: BytesLike,
        usr: string
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"bytes32","name":"collateralType","type":"bytes32"},{"internalType":"address","name":"usr","type":"address"}],"name":"openSAFE","outputs":[{"internalType":"uint256","name":"safe","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [manager, collateralType, usr])
    }

    /**
     * Quit the system, migrating the safe (lockedCollateral, generatedDebt) to a different dst handler
     * @param dst - destination handler
     * @param manager address - Safe Manager
     * @param safe uint - Safe Id
     */

    quitSystem(
        manager: string,
        safe: BigNumberish,
        dst: string
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"address","name":"dst","type":"address"}],"name":"quitSystem","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [manager, safe, dst])
    }

    /**
     * Repays debt
     * @param coinJoin address
     * @param manager address
     * @param safe uint - Safe Id
     * @param wad uint - Amount
     */

    repayDebt(
        manager: string,
        coinJoin: string,
        safe: BigNumberish,
        wad: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"coinJoin","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"uint256","name":"wad","type":"uint256"}],"name":"repayDebt","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [manager, coinJoin, safe, wad])
    }

    /**
     * Repays debt and frees ETH (sends it to msg.sender)
     * @param coinJoin address
     * @param collateralWad uint - Amount of collateral to free
     * @param deltaWad uint - Amount of debt to repay
     * @param ethJoin address
     * @param manager address
     * @param safe uint - Safe Id
     */

    repayDebtAndFreeETH(
        manager: string,
        ethJoin: string,
        coinJoin: string,
        safe: BigNumberish,
        collateralWad: BigNumberish,
        deltaWad: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"ethJoin","type":"address"},{"internalType":"address","name":"coinJoin","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"uint256","name":"collateralWad","type":"uint256"},{"internalType":"uint256","name":"deltaWad","type":"uint256"}],"name":"repayDebtAndFreeETH","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [
            manager,
            ethJoin,
            coinJoin,
            safe,
            collateralWad,
            deltaWad,
        ])
    }

    /**
     * ERC20 transfer
     * @param amt address - Amount to transfer
     * @param collateral address - address of ERC20 collateral
     * @param dst address - Transfer destination
     */

    transfer(
        collateral: string,
        dst: string,
        amt: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"collateral","type":"address"},{"internalType":"address","name":"dst","type":"address"},{"internalType":"uint256","name":"amt","type":"uint256"}],"name":"transfer","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [collateral, dst, amt])
    }

    /**
     * Transfer wad amount of safe collateral from the safe address to a dst address.
     * @param dst address - destination address uint wad - amount
     * @param manager address - Safe Manager
     * @param safe uint - Safe Id
     */

    transferCollateral(
        manager: string,
        safe: BigNumberish,
        dst: string,
        wad: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"address","name":"dst","type":"address"},{"internalType":"uint256","name":"wad","type":"uint256"}],"name":"transferCollateral","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [manager, safe, dst, wad])
    }

    /**
     * Transfer rad amount of COIN from the safe address to a dst address.
     * @param dst address - destination address uint rad - amount
     * @param manager address - Safe Manager
     * @param safe uint - Safe Id
     */

    transferInternalCoins(
        manager: string,
        safe: BigNumberish,
        dst: string,
        rad: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"address","name":"dst","type":"address"},{"internalType":"uint256","name":"rad","type":"uint256"}],"name":"transferInternalCoins","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [manager, safe, dst, rad])
    }

    /**
     * Transfer the ownership of a proxy owned Safe
     * @param manager address - Safe Manager
     * @param safe uint - Safe Id
     * @param usr address - Owner of the safe
     */

    transferSAFEOwnership(
        manager: string,
        safe: BigNumberish,
        usr: string
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"manager","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"address","name":"usr","type":"address"}],"name":"transferSAFEOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [manager, safe, usr])
    }

    /**
     * Transfer the ownership to a new proxy owned by a different address
     * @param dst address - Owner of the new proxy
     * @param manager address - Safe Manager
     * @param proxyRegistry address - Safe Manager
     * @param safe uint - Safe Id
     */

    transferSAFEOwnershipToProxy(
        proxyRegistry: string,
        manager: string,
        safe: BigNumberish,
        dst: string
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"proxyRegistry","type":"address"},{"internalType":"address","name":"manager","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"address","name":"dst","type":"address"}],"name":"transferSAFEOwnershipToProxy","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [
            proxyRegistry,
            manager,
            safe,
            dst,
        ])
    }
}
