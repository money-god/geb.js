/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { BaseContractAPI } from '@reflexer-finance/geb-contract-base'
import { MulticallRequest } from '@reflexer-finance/geb-contract-base'
import { TransactionRequest } from '@reflexer-finance/geb-contract-base'
import { BytesLike } from '@ethersproject/bytes'
import { BigNumberish } from '@ethersproject/bignumber'
import { BigNumber } from '@ethersproject/bignumber'

export class DsPause extends BaseContractAPI {
    DS_PAUSE_TYPE(): Promise<string>
    DS_PAUSE_TYPE(multicall: true): MulticallRequest<string>
    DS_PAUSE_TYPE(
        multicall?: true
    ): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"DS_PAUSE_TYPE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    EXEC_TIME(): Promise<BigNumber>
    EXEC_TIME(multicall: true): MulticallRequest<BigNumber>
    EXEC_TIME(
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"EXEC_TIME","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    MAX_DELAY(): Promise<BigNumber>
    MAX_DELAY(multicall: true): MulticallRequest<BigNumber>
    MAX_DELAY(
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"MAX_DELAY","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    abandonTransaction(
        usr: string,
        codeHash: BytesLike,
        parameters: BytesLike,
        earliestExecutionTime: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"usr","type":"address"},{"internalType":"bytes32","name":"codeHash","type":"bytes32"},{"internalType":"bytes","name":"parameters","type":"bytes"},{"internalType":"uint256","name":"earliestExecutionTime","type":"uint256"}],"name":"abandonTransaction","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [
            usr,
            codeHash,
            parameters,
            earliestExecutionTime,
        ])
    }

    attachTransactionDescription(
        usr: string,
        codeHash: BytesLike,
        parameters: BytesLike,
        earliestExecutionTime: BigNumberish,
        description: string
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"usr","type":"address"},{"internalType":"bytes32","name":"codeHash","type":"bytes32"},{"internalType":"bytes","name":"parameters","type":"bytes"},{"internalType":"uint256","name":"earliestExecutionTime","type":"uint256"},{"internalType":"string","name":"description","type":"string"}],"name":"attachTransactionDescription","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [
            usr,
            codeHash,
            parameters,
            earliestExecutionTime,
            description,
        ])
    }

    authority(): Promise<string>
    authority(multicall: true): MulticallRequest<string>
    authority(multicall?: true): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"authority","outputs":[{"internalType":"contract DSAuthority","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    currentlyScheduledTransactions(): Promise<BigNumber>
    currentlyScheduledTransactions(multicall: true): MulticallRequest<BigNumber>
    currentlyScheduledTransactions(
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"currentlyScheduledTransactions","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    delay(): Promise<BigNumber>
    delay(multicall: true): MulticallRequest<BigNumber>
    delay(multicall?: true): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"delay","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    executeTransaction(
        usr: string,
        codeHash: BytesLike,
        parameters: BytesLike,
        earliestExecutionTime: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"usr","type":"address"},{"internalType":"bytes32","name":"codeHash","type":"bytes32"},{"internalType":"bytes","name":"parameters","type":"bytes"},{"internalType":"uint256","name":"earliestExecutionTime","type":"uint256"}],"name":"executeTransaction","outputs":[{"internalType":"bytes","name":"out","type":"bytes"}],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [
            usr,
            codeHash,
            parameters,
            earliestExecutionTime,
        ])
    }

    getTransactionDataHash__AddressBytes32Bytes(
        usr: string,
        codeHash: BytesLike,
        parameters: BytesLike
    ): Promise<string>
    getTransactionDataHash__AddressBytes32Bytes(
        usr: string,
        codeHash: BytesLike,
        parameters: BytesLike,
        multicall: true
    ): MulticallRequest<string>
    getTransactionDataHash__AddressBytes32Bytes(
        usr: string,
        codeHash: BytesLike,
        parameters: BytesLike,
        multicall?: true
    ): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"usr","type":"address"},{"internalType":"bytes32","name":"codeHash","type":"bytes32"},{"internalType":"bytes","name":"parameters","type":"bytes"}],"name":"getTransactionDataHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"}

        return this.ethCallOrMulticall(
            abi,
            [usr, codeHash, parameters],
            multicall
        )
    }

    getTransactionDataHash__AddressBytes32BytesUint256(
        usr: string,
        codeHash: BytesLike,
        parameters: BytesLike,
        earliestExecutionTime: BigNumberish
    ): Promise<string>
    getTransactionDataHash__AddressBytes32BytesUint256(
        usr: string,
        codeHash: BytesLike,
        parameters: BytesLike,
        earliestExecutionTime: BigNumberish,
        multicall: true
    ): MulticallRequest<string>
    getTransactionDataHash__AddressBytes32BytesUint256(
        usr: string,
        codeHash: BytesLike,
        parameters: BytesLike,
        earliestExecutionTime: BigNumberish,
        multicall?: true
    ): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"usr","type":"address"},{"internalType":"bytes32","name":"codeHash","type":"bytes32"},{"internalType":"bytes","name":"parameters","type":"bytes"},{"internalType":"uint256","name":"earliestExecutionTime","type":"uint256"}],"name":"getTransactionDataHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"}

        return this.ethCallOrMulticall(
            abi,
            [usr, codeHash, parameters, earliestExecutionTime],
            multicall
        )
    }

    maxScheduledTransactions(): Promise<BigNumber>
    maxScheduledTransactions(multicall: true): MulticallRequest<BigNumber>
    maxScheduledTransactions(
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"maxScheduledTransactions","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    owner(): Promise<string>
    owner(multicall: true): MulticallRequest<string>
    owner(multicall?: true): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    proxy(): Promise<string>
    proxy(multicall: true): MulticallRequest<string>
    proxy(multicall?: true): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"proxy","outputs":[{"internalType":"contract DSPauseProxy","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    scheduleTransaction__AddressBytes32BytesUint256(
        usr: string,
        codeHash: BytesLike,
        parameters: BytesLike,
        earliestExecutionTime: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"usr","type":"address"},{"internalType":"bytes32","name":"codeHash","type":"bytes32"},{"internalType":"bytes","name":"parameters","type":"bytes"},{"internalType":"uint256","name":"earliestExecutionTime","type":"uint256"}],"name":"scheduleTransaction","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [
            usr,
            codeHash,
            parameters,
            earliestExecutionTime,
        ])
    }

    scheduleTransaction__AddressBytes32BytesUint256String(
        usr: string,
        codeHash: BytesLike,
        parameters: BytesLike,
        earliestExecutionTime: BigNumberish,
        description: string
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"usr","type":"address"},{"internalType":"bytes32","name":"codeHash","type":"bytes32"},{"internalType":"bytes","name":"parameters","type":"bytes"},{"internalType":"uint256","name":"earliestExecutionTime","type":"uint256"},{"internalType":"string","name":"description","type":"string"}],"name":"scheduleTransaction","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [
            usr,
            codeHash,
            parameters,
            earliestExecutionTime,
            description,
        ])
    }

    scheduledTransactions(bytes: BytesLike): Promise<boolean>
    scheduledTransactions(
        bytes: BytesLike,
        multicall: true
    ): MulticallRequest<boolean>
    scheduledTransactions(
        bytes: BytesLike,
        multicall?: true
    ): Promise<boolean> | MulticallRequest<boolean> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"scheduledTransactions","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [bytes], multicall)
    }

    scheduledTransactionsDataHashes(bytes: BytesLike): Promise<boolean>
    scheduledTransactionsDataHashes(
        bytes: BytesLike,
        multicall: true
    ): MulticallRequest<boolean>
    scheduledTransactionsDataHashes(
        bytes: BytesLike,
        multicall?: true
    ): Promise<boolean> | MulticallRequest<boolean> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"scheduledTransactionsDataHashes","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [bytes], multicall)
    }

    setAuthority(authority_: string): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"contract DSAuthority","name":"authority_","type":"address"}],"name":"setAuthority","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [authority_])
    }

    setDelay(delay_: BigNumberish): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"uint256","name":"delay_","type":"uint256"}],"name":"setDelay","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [delay_])
    }

    setOwner(owner_: string): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"owner_","type":"address"}],"name":"setOwner","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [owner_])
    }
}
