/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { BaseContractAPI } from '@money-god/geb-contract-base'
import { MulticallRequest } from '@money-god/geb-contract-base'
import { TransactionRequest } from '@money-god/geb-contract-base'
import { BytesLike } from '@ethersproject/bytes'
import { BigNumberish } from '@ethersproject/bignumber'
import { BigNumber } from '@ethersproject/bignumber'

export class UniswapV3Pool extends BaseContractAPI {
    burn(
        tickLower: BigNumberish,
        tickUpper: BigNumberish,
        amount: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"},{"internalType":"uint128","name":"amount","type":"uint128"}],"name":"burn","outputs":[{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [tickLower, tickUpper, amount])
    }

    collect(
        recipient: string,
        tickLower: BigNumberish,
        tickUpper: BigNumberish,
        amount0Requested: BigNumberish,
        amount1Requested: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"},{"internalType":"uint128","name":"amount0Requested","type":"uint128"},{"internalType":"uint128","name":"amount1Requested","type":"uint128"}],"name":"collect","outputs":[{"internalType":"uint128","name":"amount0","type":"uint128"},{"internalType":"uint128","name":"amount1","type":"uint128"}],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [
            recipient,
            tickLower,
            tickUpper,
            amount0Requested,
            amount1Requested,
        ])
    }

    collectProtocol(
        recipient: string,
        amount0Requested: BigNumberish,
        amount1Requested: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint128","name":"amount0Requested","type":"uint128"},{"internalType":"uint128","name":"amount1Requested","type":"uint128"}],"name":"collectProtocol","outputs":[{"internalType":"uint128","name":"amount0","type":"uint128"},{"internalType":"uint128","name":"amount1","type":"uint128"}],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [
            recipient,
            amount0Requested,
            amount1Requested,
        ])
    }

    factory(): Promise<string>
    factory(multicall: true): MulticallRequest<string>
    factory(multicall?: true): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    fee(): Promise<number>
    fee(multicall: true): MulticallRequest<number>
    fee(multicall?: true): Promise<number> | MulticallRequest<number> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"fee","outputs":[{"internalType":"uint24","name":"","type":"uint24"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    feeGrowthGlobal0X128(): Promise<BigNumber>
    feeGrowthGlobal0X128(multicall: true): MulticallRequest<BigNumber>
    feeGrowthGlobal0X128(
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"feeGrowthGlobal0X128","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    feeGrowthGlobal1X128(): Promise<BigNumber>
    feeGrowthGlobal1X128(multicall: true): MulticallRequest<BigNumber>
    feeGrowthGlobal1X128(
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"feeGrowthGlobal1X128","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    flash(
        recipient: string,
        amount0: BigNumberish,
        amount1: BigNumberish,
        data: BytesLike
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"flash","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [
            recipient,
            amount0,
            amount1,
            data,
        ])
    }

    increaseObservationCardinalityNext(
        observationCardinalityNext: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"uint16","name":"observationCardinalityNext","type":"uint16"}],"name":"increaseObservationCardinalityNext","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [observationCardinalityNext])
    }

    initialize(sqrtPriceX96: BigNumberish): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [sqrtPriceX96])
    }

    liquidity(): Promise<BigNumber>
    liquidity(multicall: true): MulticallRequest<BigNumber>
    liquidity(
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"liquidity","outputs":[{"internalType":"uint128","name":"","type":"uint128"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    maxLiquidityPerTick(): Promise<BigNumber>
    maxLiquidityPerTick(multicall: true): MulticallRequest<BigNumber>
    maxLiquidityPerTick(
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"maxLiquidityPerTick","outputs":[{"internalType":"uint128","name":"","type":"uint128"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    mint(
        recipient: string,
        tickLower: BigNumberish,
        tickUpper: BigNumberish,
        amount: BigNumberish,
        data: BytesLike
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"},{"internalType":"uint128","name":"amount","type":"uint128"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"mint","outputs":[{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [
            recipient,
            tickLower,
            tickUpper,
            amount,
            data,
        ])
    }

    observations(
        uinteger: BigNumberish
    ): Promise<{
        blockTimestamp: number
        tickCumulative: BigNumber
        secondsPerLiquidityCumulativeX128: BigNumber
        initialized: boolean
    }>
    observations(
        uinteger: BigNumberish,
        multicall: true
    ): MulticallRequest<{
        blockTimestamp: number
        tickCumulative: BigNumber
        secondsPerLiquidityCumulativeX128: BigNumber
        initialized: boolean
    }>
    observations(
        uinteger: BigNumberish,
        multicall?: true
    ):
        | Promise<{
              blockTimestamp: number
              tickCumulative: BigNumber
              secondsPerLiquidityCumulativeX128: BigNumber
              initialized: boolean
          }>
        | MulticallRequest<{
              blockTimestamp: number
              tickCumulative: BigNumber
              secondsPerLiquidityCumulativeX128: BigNumber
              initialized: boolean
          }> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"observations","outputs":[{"internalType":"uint32","name":"blockTimestamp","type":"uint32"},{"internalType":"int56","name":"tickCumulative","type":"int56"},{"internalType":"uint160","name":"secondsPerLiquidityCumulativeX128","type":"uint160"},{"internalType":"bool","name":"initialized","type":"bool"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [uinteger], multicall)
    }

    observe(
        secondsAgos: BigNumberish[]
    ): Promise<{
        tickCumulatives: BigNumber[]
        secondsPerLiquidityCumulativeX128s: BigNumber[]
    }>
    observe(
        secondsAgos: BigNumberish[],
        multicall: true
    ): MulticallRequest<{
        tickCumulatives: BigNumber[]
        secondsPerLiquidityCumulativeX128s: BigNumber[]
    }>
    observe(
        secondsAgos: BigNumberish[],
        multicall?: true
    ):
        | Promise<{
              tickCumulatives: BigNumber[]
              secondsPerLiquidityCumulativeX128s: BigNumber[]
          }>
        | MulticallRequest<{
              tickCumulatives: BigNumber[]
              secondsPerLiquidityCumulativeX128s: BigNumber[]
          }> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"uint32[]","name":"secondsAgos","type":"uint32[]"}],"name":"observe","outputs":[{"internalType":"int56[]","name":"tickCumulatives","type":"int56[]"},{"internalType":"uint160[]","name":"secondsPerLiquidityCumulativeX128s","type":"uint160[]"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [secondsAgos], multicall)
    }

    positions(
        bytes: BytesLike
    ): Promise<{
        liquidity: BigNumber
        feeGrowthInside0LastX128: BigNumber
        feeGrowthInside1LastX128: BigNumber
        tokensOwed0: BigNumber
        tokensOwed1: BigNumber
    }>
    positions(
        bytes: BytesLike,
        multicall: true
    ): MulticallRequest<{
        liquidity: BigNumber
        feeGrowthInside0LastX128: BigNumber
        feeGrowthInside1LastX128: BigNumber
        tokensOwed0: BigNumber
        tokensOwed1: BigNumber
    }>
    positions(
        bytes: BytesLike,
        multicall?: true
    ):
        | Promise<{
              liquidity: BigNumber
              feeGrowthInside0LastX128: BigNumber
              feeGrowthInside1LastX128: BigNumber
              tokensOwed0: BigNumber
              tokensOwed1: BigNumber
          }>
        | MulticallRequest<{
              liquidity: BigNumber
              feeGrowthInside0LastX128: BigNumber
              feeGrowthInside1LastX128: BigNumber
              tokensOwed0: BigNumber
              tokensOwed1: BigNumber
          }> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"positions","outputs":[{"internalType":"uint128","name":"liquidity","type":"uint128"},{"internalType":"uint256","name":"feeGrowthInside0LastX128","type":"uint256"},{"internalType":"uint256","name":"feeGrowthInside1LastX128","type":"uint256"},{"internalType":"uint128","name":"tokensOwed0","type":"uint128"},{"internalType":"uint128","name":"tokensOwed1","type":"uint128"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [bytes], multicall)
    }

    protocolFees(): Promise<{
        token0: BigNumber
        token1: BigNumber
    }>
    protocolFees(
        multicall: true
    ): MulticallRequest<{
        token0: BigNumber
        token1: BigNumber
    }>
    protocolFees(
        multicall?: true
    ):
        | Promise<{
              token0: BigNumber
              token1: BigNumber
          }>
        | MulticallRequest<{
              token0: BigNumber
              token1: BigNumber
          }> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"protocolFees","outputs":[{"internalType":"uint128","name":"token0","type":"uint128"},{"internalType":"uint128","name":"token1","type":"uint128"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    setFeeProtocol(
        feeProtocol0: BigNumberish,
        feeProtocol1: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"uint8","name":"feeProtocol0","type":"uint8"},{"internalType":"uint8","name":"feeProtocol1","type":"uint8"}],"name":"setFeeProtocol","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [feeProtocol0, feeProtocol1])
    }

    slot0(): Promise<{
        sqrtPriceX96: BigNumber
        tick: number
        observationIndex: number
        observationCardinality: number
        observationCardinalityNext: number
        feeProtocol: number
        unlocked: boolean
    }>
    slot0(
        multicall: true
    ): MulticallRequest<{
        sqrtPriceX96: BigNumber
        tick: number
        observationIndex: number
        observationCardinality: number
        observationCardinalityNext: number
        feeProtocol: number
        unlocked: boolean
    }>
    slot0(
        multicall?: true
    ):
        | Promise<{
              sqrtPriceX96: BigNumber
              tick: number
              observationIndex: number
              observationCardinality: number
              observationCardinalityNext: number
              feeProtocol: number
              unlocked: boolean
          }>
        | MulticallRequest<{
              sqrtPriceX96: BigNumber
              tick: number
              observationIndex: number
              observationCardinality: number
              observationCardinalityNext: number
              feeProtocol: number
              unlocked: boolean
          }> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"slot0","outputs":[{"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"},{"internalType":"int24","name":"tick","type":"int24"},{"internalType":"uint16","name":"observationIndex","type":"uint16"},{"internalType":"uint16","name":"observationCardinality","type":"uint16"},{"internalType":"uint16","name":"observationCardinalityNext","type":"uint16"},{"internalType":"uint8","name":"feeProtocol","type":"uint8"},{"internalType":"bool","name":"unlocked","type":"bool"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    snapshotCumulativesInside(
        tickLower: BigNumberish,
        tickUpper: BigNumberish
    ): Promise<{
        tickCumulativeInside: BigNumber
        secondsPerLiquidityInsideX128: BigNumber
        secondsInside: number
    }>
    snapshotCumulativesInside(
        tickLower: BigNumberish,
        tickUpper: BigNumberish,
        multicall: true
    ): MulticallRequest<{
        tickCumulativeInside: BigNumber
        secondsPerLiquidityInsideX128: BigNumber
        secondsInside: number
    }>
    snapshotCumulativesInside(
        tickLower: BigNumberish,
        tickUpper: BigNumberish,
        multicall?: true
    ):
        | Promise<{
              tickCumulativeInside: BigNumber
              secondsPerLiquidityInsideX128: BigNumber
              secondsInside: number
          }>
        | MulticallRequest<{
              tickCumulativeInside: BigNumber
              secondsPerLiquidityInsideX128: BigNumber
              secondsInside: number
          }> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"}],"name":"snapshotCumulativesInside","outputs":[{"internalType":"int56","name":"tickCumulativeInside","type":"int56"},{"internalType":"uint160","name":"secondsPerLiquidityInsideX128","type":"uint160"},{"internalType":"uint32","name":"secondsInside","type":"uint32"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [tickLower, tickUpper], multicall)
    }

    swap(
        recipient: string,
        zeroForOne: boolean,
        amountSpecified: BigNumberish,
        sqrtPriceLimitX96: BigNumberish,
        data: BytesLike
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bool","name":"zeroForOne","type":"bool"},{"internalType":"int256","name":"amountSpecified","type":"int256"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"swap","outputs":[{"internalType":"int256","name":"amount0","type":"int256"},{"internalType":"int256","name":"amount1","type":"int256"}],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [
            recipient,
            zeroForOne,
            amountSpecified,
            sqrtPriceLimitX96,
            data,
        ])
    }

    tickBitmap(integer: BigNumberish): Promise<BigNumber>
    tickBitmap(
        integer: BigNumberish,
        multicall: true
    ): MulticallRequest<BigNumber>
    tickBitmap(
        integer: BigNumberish,
        multicall?: true
    ): Promise<BigNumber> | MulticallRequest<BigNumber> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"int16","name":"","type":"int16"}],"name":"tickBitmap","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [integer], multicall)
    }

    tickSpacing(): Promise<number>
    tickSpacing(multicall: true): MulticallRequest<number>
    tickSpacing(multicall?: true): Promise<number> | MulticallRequest<number> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"tickSpacing","outputs":[{"internalType":"int24","name":"","type":"int24"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    ticks(
        integer: BigNumberish
    ): Promise<{
        liquidityGross: BigNumber
        liquidityNet: BigNumber
        feeGrowthOutside0X128: BigNumber
        feeGrowthOutside1X128: BigNumber
        tickCumulativeOutside: BigNumber
        secondsPerLiquidityOutsideX128: BigNumber
        secondsOutside: number
        initialized: boolean
    }>
    ticks(
        integer: BigNumberish,
        multicall: true
    ): MulticallRequest<{
        liquidityGross: BigNumber
        liquidityNet: BigNumber
        feeGrowthOutside0X128: BigNumber
        feeGrowthOutside1X128: BigNumber
        tickCumulativeOutside: BigNumber
        secondsPerLiquidityOutsideX128: BigNumber
        secondsOutside: number
        initialized: boolean
    }>
    ticks(
        integer: BigNumberish,
        multicall?: true
    ):
        | Promise<{
              liquidityGross: BigNumber
              liquidityNet: BigNumber
              feeGrowthOutside0X128: BigNumber
              feeGrowthOutside1X128: BigNumber
              tickCumulativeOutside: BigNumber
              secondsPerLiquidityOutsideX128: BigNumber
              secondsOutside: number
              initialized: boolean
          }>
        | MulticallRequest<{
              liquidityGross: BigNumber
              liquidityNet: BigNumber
              feeGrowthOutside0X128: BigNumber
              feeGrowthOutside1X128: BigNumber
              tickCumulativeOutside: BigNumber
              secondsPerLiquidityOutsideX128: BigNumber
              secondsOutside: number
              initialized: boolean
          }> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"int24","name":"","type":"int24"}],"name":"ticks","outputs":[{"internalType":"uint128","name":"liquidityGross","type":"uint128"},{"internalType":"int128","name":"liquidityNet","type":"int128"},{"internalType":"uint256","name":"feeGrowthOutside0X128","type":"uint256"},{"internalType":"uint256","name":"feeGrowthOutside1X128","type":"uint256"},{"internalType":"int56","name":"tickCumulativeOutside","type":"int56"},{"internalType":"uint160","name":"secondsPerLiquidityOutsideX128","type":"uint160"},{"internalType":"uint32","name":"secondsOutside","type":"uint32"},{"internalType":"bool","name":"initialized","type":"bool"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [integer], multicall)
    }

    token0(): Promise<string>
    token0(multicall: true): MulticallRequest<string>
    token0(multicall?: true): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"token0","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }

    token1(): Promise<string>
    token1(multicall: true): MulticallRequest<string>
    token1(multicall?: true): Promise<string> | MulticallRequest<string> {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[],"name":"token1","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}

        return this.ethCallOrMulticall(abi, [], multicall)
    }
}
