/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { BaseContractAPI } from '@money-god/geb-contract-base'
import { TransactionRequest } from '@money-god/geb-contract-base'
import { BytesLike } from '@ethersproject/bytes'
import { BigNumberish } from '@ethersproject/bignumber'

export class GebProxySaviourActions extends BaseContractAPI {
    deposit(
        collateralSpecific: boolean,
        saviour: string,
        manager: string,
        token: string,
        safe: BigNumberish,
        tokenAmount: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"bool","name":"collateralSpecific","type":"bool"},{"internalType":"address","name":"saviour","type":"address"},{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"uint256","name":"tokenAmount","type":"uint256"}],"name":"deposit","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [
            collateralSpecific,
            saviour,
            manager,
            token,
            safe,
            tokenAmount,
        ])
    }

    getReserves(
        saviour: string,
        safe: BigNumberish,
        dst: string
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"saviour","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"address","name":"dst","type":"address"}],"name":"getReserves","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [saviour, safe, dst])
    }

    getReservesAndUncover(
        saviour: string,
        manager: string,
        liquidationEngine: string,
        safe: BigNumberish,
        dst: string
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"saviour","type":"address"},{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"liquidationEngine","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"address","name":"dst","type":"address"}],"name":"getReservesAndUncover","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [
            saviour,
            manager,
            liquidationEngine,
            safe,
            dst,
        ])
    }

    protectSAFE(
        saviour: string,
        manager: string,
        safe: BigNumberish,
        liquidationEngine: string
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"saviour","type":"address"},{"internalType":"address","name":"manager","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"address","name":"liquidationEngine","type":"address"}],"name":"protectSAFE","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [
            saviour,
            manager,
            safe,
            liquidationEngine,
        ])
    }

    protectSAFEDeposit(
        collateralSpecific: boolean,
        saviour: string,
        manager: string,
        token: string,
        liquidationEngine: string,
        safe: BigNumberish,
        tokenAmount: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"bool","name":"collateralSpecific","type":"bool"},{"internalType":"address","name":"saviour","type":"address"},{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"liquidationEngine","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"uint256","name":"tokenAmount","type":"uint256"}],"name":"protectSAFEDeposit","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [
            collateralSpecific,
            saviour,
            manager,
            token,
            liquidationEngine,
            safe,
            tokenAmount,
        ])
    }

    protectSAFESetDesiredCRatioDeposit(
        collateralSpecific: boolean,
        saviour: string,
        cRatioSetter: string,
        manager: string,
        token: string,
        liquidationEngine: string,
        safe: BigNumberish,
        tokenAmount: BigNumberish,
        cRatio: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"bool","name":"collateralSpecific","type":"bool"},{"internalType":"address","name":"saviour","type":"address"},{"internalType":"address","name":"cRatioSetter","type":"address"},{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"liquidationEngine","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"uint256","name":"tokenAmount","type":"uint256"},{"internalType":"uint256","name":"cRatio","type":"uint256"}],"name":"protectSAFESetDesiredCRatioDeposit","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [
            collateralSpecific,
            saviour,
            cRatioSetter,
            manager,
            token,
            liquidationEngine,
            safe,
            tokenAmount,
            cRatio,
        ])
    }

    setDesiredCRatioDeposit(
        collateralSpecific: boolean,
        saviour: string,
        cRatioSetter: string,
        manager: string,
        token: string,
        safe: BigNumberish,
        tokenAmount: BigNumberish,
        cRatio: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"bool","name":"collateralSpecific","type":"bool"},{"internalType":"address","name":"saviour","type":"address"},{"internalType":"address","name":"cRatioSetter","type":"address"},{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"uint256","name":"tokenAmount","type":"uint256"},{"internalType":"uint256","name":"cRatio","type":"uint256"}],"name":"setDesiredCRatioDeposit","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [
            collateralSpecific,
            saviour,
            cRatioSetter,
            manager,
            token,
            safe,
            tokenAmount,
            cRatio,
        ])
    }

    setDesiredCRatioWithdraw(
        collateralSpecific: boolean,
        saviour: string,
        cRatioSetter: string,
        manager: string,
        safe: BigNumberish,
        tokenAmount: BigNumberish,
        cRatio: BigNumberish,
        dst: string
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"bool","name":"collateralSpecific","type":"bool"},{"internalType":"address","name":"saviour","type":"address"},{"internalType":"address","name":"cRatioSetter","type":"address"},{"internalType":"address","name":"manager","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"uint256","name":"tokenAmount","type":"uint256"},{"internalType":"uint256","name":"cRatio","type":"uint256"},{"internalType":"address","name":"dst","type":"address"}],"name":"setDesiredCRatioWithdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [
            collateralSpecific,
            saviour,
            cRatioSetter,
            manager,
            safe,
            tokenAmount,
            cRatio,
            dst,
        ])
    }

    setDesiredCollateralizationRatio(
        cRatioSetter: string,
        collateralType: BytesLike,
        safe: BigNumberish,
        cRatio: BigNumberish
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address","name":"cRatioSetter","type":"address"},{"internalType":"bytes32","name":"collateralType","type":"bytes32"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"uint256","name":"cRatio","type":"uint256"}],"name":"setDesiredCollateralizationRatio","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [
            cRatioSetter,
            collateralType,
            safe,
            cRatio,
        ])
    }

    transferTokensToCaller(tokens: string[]): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"address[]","name":"tokens","type":"address[]"}],"name":"transferTokensToCaller","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [tokens])
    }

    withdraw(
        collateralSpecific: boolean,
        saviour: string,
        manager: string,
        safe: BigNumberish,
        tokenAmount: BigNumberish,
        dst: string
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"bool","name":"collateralSpecific","type":"bool"},{"internalType":"address","name":"saviour","type":"address"},{"internalType":"address","name":"manager","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"uint256","name":"tokenAmount","type":"uint256"},{"internalType":"address","name":"dst","type":"address"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [
            collateralSpecific,
            saviour,
            manager,
            safe,
            tokenAmount,
            dst,
        ])
    }

    withdrawProtectSAFEDeposit(
        withdrawCollateralSpecific: boolean,
        depositCollateralSpecific: boolean,
        withdrawSaviour: string,
        depositSaviour: string,
        manager: string,
        depositToken: string,
        liquidationEngine: string,
        safe: BigNumberish,
        withdrawTokenAmount: BigNumberish,
        depositTokenAmount: BigNumberish,
        withdrawDst: string
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"bool","name":"withdrawCollateralSpecific","type":"bool"},{"internalType":"bool","name":"depositCollateralSpecific","type":"bool"},{"internalType":"address","name":"withdrawSaviour","type":"address"},{"internalType":"address","name":"depositSaviour","type":"address"},{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"depositToken","type":"address"},{"internalType":"address","name":"liquidationEngine","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"uint256","name":"withdrawTokenAmount","type":"uint256"},{"internalType":"uint256","name":"depositTokenAmount","type":"uint256"},{"internalType":"address","name":"withdrawDst","type":"address"}],"name":"withdrawProtectSAFEDeposit","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [
            withdrawCollateralSpecific,
            depositCollateralSpecific,
            withdrawSaviour,
            depositSaviour,
            manager,
            depositToken,
            liquidationEngine,
            safe,
            withdrawTokenAmount,
            depositTokenAmount,
            withdrawDst,
        ])
    }

    withdrawUncoverSAFE(
        collateralSpecific: boolean,
        saviour: string,
        manager: string,
        token: string,
        liquidationEngine: string,
        safe: BigNumberish,
        tokenAmount: BigNumberish,
        dst: string
    ): TransactionRequest {
        // prettier-ignore
        // @ts-ignore
        const abi = {"inputs":[{"internalType":"bool","name":"collateralSpecific","type":"bool"},{"internalType":"address","name":"saviour","type":"address"},{"internalType":"address","name":"manager","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"liquidationEngine","type":"address"},{"internalType":"uint256","name":"safe","type":"uint256"},{"internalType":"uint256","name":"tokenAmount","type":"uint256"},{"internalType":"address","name":"dst","type":"address"}],"name":"withdrawUncoverSAFE","outputs":[],"stateMutability":"nonpayable","type":"function"}

        return this.getTransactionRequest(abi, [
            collateralSpecific,
            saviour,
            manager,
            token,
            liquidationEngine,
            safe,
            tokenAmount,
            dst,
        ])
    }
}
